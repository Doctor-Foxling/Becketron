diff --git a/Hazel/Hazel.vcxproj "b/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj"
similarity index 66%
rename from Hazel/Hazel.vcxproj
rename to "C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj"
index 26e3502..1f187db 100644
--- a/Hazel/Hazel.vcxproj
+++ "b/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj"
@@ -15,10 +15,10 @@
     </ProjectConfiguration>
   </ItemGroup>
   <PropertyGroup Label="Globals">
-    <ProjectGuid>{99294D0D-053E-75BE-CEBF-181E3A9371EF}</ProjectGuid>
+    <ProjectGuid>{225EEDF5-8EC8-A16C-D706-531243B07FC1}</ProjectGuid>
     <IgnoreWarnCompileDuplicatedFilename>true</IgnoreWarnCompileDuplicatedFilename>
     <Keyword>Win32Proj</Keyword>
-    <RootNamespace>Hazel</RootNamespace>
+    <RootNamespace>Becketron</RootNamespace>
     <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
@@ -55,54 +55,54 @@
   <PropertyGroup Label="UserMacros" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
     <LinkIncremental>true</LinkIncremental>
-    <OutDir>..\bin\Debug-windows-x86_64\Hazel\</OutDir>
-    <IntDir>..\bin-int\Debug-windows-x86_64\Hazel\</IntDir>
-    <TargetName>Hazel</TargetName>
+    <OutDir>..\bin\Debug-windows-x86_64\Becketron\</OutDir>
+    <IntDir>..\bin-int\Debug-windows-x86_64\Becketron\</IntDir>
+    <TargetName>Becketron</TargetName>
     <TargetExt>.dll</TargetExt>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
     <LinkIncremental>false</LinkIncremental>
-    <OutDir>..\bin\Release-windows-x86_64\Hazel\</OutDir>
-    <IntDir>..\bin-int\Release-windows-x86_64\Hazel\</IntDir>
-    <TargetName>Hazel</TargetName>
+    <OutDir>..\bin\Release-windows-x86_64\Becketron\</OutDir>
+    <IntDir>..\bin-int\Release-windows-x86_64\Becketron\</IntDir>
+    <TargetName>Becketron</TargetName>
     <TargetExt>.dll</TargetExt>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Dist|x64'">
     <LinkIncremental>false</LinkIncremental>
-    <OutDir>..\bin\Dist-windows-x86_64\Hazel\</OutDir>
-    <IntDir>..\bin-int\Dist-windows-x86_64\Hazel\</IntDir>
-    <TargetName>Hazel</TargetName>
+    <OutDir>..\bin\Dist-windows-x86_64\Becketron\</OutDir>
+    <IntDir>..\bin-int\Dist-windows-x86_64\Becketron\</IntDir>
+    <TargetName>Becketron</TargetName>
     <TargetExt>.dll</TargetExt>
   </PropertyGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
     <ClCompile>
       <PrecompiledHeader>Use</PrecompiledHeader>
-      <PrecompiledHeaderFile>hzpch.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile>btpch.h</PrecompiledHeaderFile>
       <WarningLevel>Level3</WarningLevel>
-      <PreprocessorDefinitions>HZ_PLATFORM_WINDOWS;HZ_BUILD_DLL;HZ_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BT_PLATFORM_WINDOWS;BTRON_BUILD_DLL;BT_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <AdditionalIncludeDirectories>src;vendor\spdlog\include;vendor\GLFW\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
       <Optimization>Disabled</Optimization>
       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
       <AdditionalOptions>/MDd %(AdditionalOptions)</AdditionalOptions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
+      <LanguageStandard>stdcpplatest</LanguageStandard>
     </ClCompile>
     <Link>
       <SubSystem>Windows</SubSystem>
       <GenerateDebugInformation>true</GenerateDebugInformation>
       <AdditionalDependencies>opengl32.lib;%(AdditionalDependencies)</AdditionalDependencies>
-      <ImportLibrary>..\bin\Debug-windows-x86_64\Hazel\Hazel.lib</ImportLibrary>
+      <ImportLibrary>..\bin\Debug-windows-x86_64\Becketron\Becketron.lib</ImportLibrary>
     </Link>
     <PostBuildEvent>
-      <Command>IF EXIST ..\bin\Debug-windows-x86_64\Hazel\Hazel.dll\ (xcopy /Q /E /Y /I ..\bin\Debug-windows-x86_64\Hazel\Hazel.dll ..\bin\Debug-windows-x86_64\Sandbox &gt; nul) ELSE (xcopy /Q /Y /I ..\bin\Debug-windows-x86_64\Hazel\Hazel.dll ..\bin\Debug-windows-x86_64\Sandbox &gt; nul)</Command>
+      <Command>IF EXIST ..\bin\Debug-windows-x86_64\Becketron\Becketron.dll\ (xcopy /Q /E /Y /I ..\bin\Debug-windows-x86_64\Becketron\Becketron.dll ..\bin\Debug-windows-x86_64\Sandbox &gt; nul) ELSE (xcopy /Q /Y /I ..\bin\Debug-windows-x86_64\Becketron\Becketron.dll ..\bin\Debug-windows-x86_64\Sandbox &gt; nul)</Command>
     </PostBuildEvent>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
     <ClCompile>
       <PrecompiledHeader>Use</PrecompiledHeader>
-      <PrecompiledHeaderFile>hzpch.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile>btpch.h</PrecompiledHeaderFile>
       <WarningLevel>Level3</WarningLevel>
-      <PreprocessorDefinitions>HZ_PLATFORM_WINDOWS;HZ_BUILD_DLL;HZ_RELEASE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BT_PLATFORM_WINDOWS;BTRON_BUILD_DLL;BT_RELEASE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <AdditionalIncludeDirectories>src;vendor\spdlog\include;vendor\GLFW\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <Optimization>Full</Optimization>
       <FunctionLevelLinking>true</FunctionLevelLinking>
@@ -111,25 +111,25 @@
       <StringPooling>true</StringPooling>
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
       <AdditionalOptions>/MD %(AdditionalOptions)</AdditionalOptions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
+      <LanguageStandard>stdcpplatest</LanguageStandard>
     </ClCompile>
     <Link>
       <SubSystem>Windows</SubSystem>
       <EnableCOMDATFolding>true</EnableCOMDATFolding>
       <OptimizeReferences>true</OptimizeReferences>
       <AdditionalDependencies>opengl32.lib;%(AdditionalDependencies)</AdditionalDependencies>
-      <ImportLibrary>..\bin\Release-windows-x86_64\Hazel\Hazel.lib</ImportLibrary>
+      <ImportLibrary>..\bin\Release-windows-x86_64\Becketron\Becketron.lib</ImportLibrary>
     </Link>
     <PostBuildEvent>
-      <Command>IF EXIST ..\bin\Release-windows-x86_64\Hazel\Hazel.dll\ (xcopy /Q /E /Y /I ..\bin\Release-windows-x86_64\Hazel\Hazel.dll ..\bin\Release-windows-x86_64\Sandbox &gt; nul) ELSE (xcopy /Q /Y /I ..\bin\Release-windows-x86_64\Hazel\Hazel.dll ..\bin\Release-windows-x86_64\Sandbox &gt; nul)</Command>
+      <Command>IF EXIST ..\bin\Release-windows-x86_64\Becketron\Becketron.dll\ (xcopy /Q /E /Y /I ..\bin\Release-windows-x86_64\Becketron\Becketron.dll ..\bin\Release-windows-x86_64\Sandbox &gt; nul) ELSE (xcopy /Q /Y /I ..\bin\Release-windows-x86_64\Becketron\Becketron.dll ..\bin\Release-windows-x86_64\Sandbox &gt; nul)</Command>
     </PostBuildEvent>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Dist|x64'">
     <ClCompile>
       <PrecompiledHeader>Use</PrecompiledHeader>
-      <PrecompiledHeaderFile>hzpch.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile>btpch.h</PrecompiledHeaderFile>
       <WarningLevel>Level3</WarningLevel>
-      <PreprocessorDefinitions>HZ_PLATFORM_WINDOWS;HZ_BUILD_DLL;HZ_DIST;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>BT_PLATFORM_WINDOWS;BTRON_BUILD_DLL;BT_DIST;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <AdditionalIncludeDirectories>src;vendor\spdlog\include;vendor\GLFW\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <Optimization>Full</Optimization>
       <FunctionLevelLinking>true</FunctionLevelLinking>
@@ -138,42 +138,42 @@
       <StringPooling>true</StringPooling>
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
       <AdditionalOptions>/MD %(AdditionalOptions)</AdditionalOptions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
+      <LanguageStandard>stdcpplatest</LanguageStandard>
     </ClCompile>
     <Link>
       <SubSystem>Windows</SubSystem>
       <EnableCOMDATFolding>true</EnableCOMDATFolding>
       <OptimizeReferences>true</OptimizeReferences>
       <AdditionalDependencies>opengl32.lib;%(AdditionalDependencies)</AdditionalDependencies>
-      <ImportLibrary>..\bin\Dist-windows-x86_64\Hazel\Hazel.lib</ImportLibrary>
+      <ImportLibrary>..\bin\Dist-windows-x86_64\Becketron\Becketron.lib</ImportLibrary>
     </Link>
     <PostBuildEvent>
-      <Command>IF EXIST ..\bin\Dist-windows-x86_64\Hazel\Hazel.dll\ (xcopy /Q /E /Y /I ..\bin\Dist-windows-x86_64\Hazel\Hazel.dll ..\bin\Dist-windows-x86_64\Sandbox &gt; nul) ELSE (xcopy /Q /Y /I ..\bin\Dist-windows-x86_64\Hazel\Hazel.dll ..\bin\Dist-windows-x86_64\Sandbox &gt; nul)</Command>
+      <Command>IF EXIST ..\bin\Dist-windows-x86_64\Becketron\Becketron.dll\ (xcopy /Q /E /Y /I ..\bin\Dist-windows-x86_64\Becketron\Becketron.dll ..\bin\Dist-windows-x86_64\Sandbox &gt; nul) ELSE (xcopy /Q /Y /I ..\bin\Dist-windows-x86_64\Becketron\Becketron.dll ..\bin\Dist-windows-x86_64\Sandbox &gt; nul)</Command>
     </PostBuildEvent>
   </ItemDefinitionGroup>
   <ItemGroup>
-    <ClInclude Include="src\Hazel.h" />
-    <ClInclude Include="src\Hazel\Application.h" />
-    <ClInclude Include="src\Hazel\Core.h" />
-    <ClInclude Include="src\Hazel\EntryPoint.h" />
-    <ClInclude Include="src\Hazel\Events\ApplicationEvent.h" />
-    <ClInclude Include="src\Hazel\Events\Event.h" />
-    <ClInclude Include="src\Hazel\Events\KeyEvent.h" />
-    <ClInclude Include="src\Hazel\Events\MouseEvent.h" />
-    <ClInclude Include="src\Hazel\Layer.h" />
-    <ClInclude Include="src\Hazel\LayerStack.h" />
-    <ClInclude Include="src\Hazel\Log.h" />
-    <ClInclude Include="src\Hazel\Window.h" />
+    <ClInclude Include="src\Becketron.h" />
+    <ClInclude Include="src\Becketron\Application.h" />
+    <ClInclude Include="src\Becketron\Core.h" />
+    <ClInclude Include="src\Becketron\EntryPoint.h" />
+    <ClInclude Include="src\Becketron\Events\ApplicationEvent.h" />
+    <ClInclude Include="src\Becketron\Events\Event.h" />
+    <ClInclude Include="src\Becketron\Events\KeyEvent.h" />
+    <ClInclude Include="src\Becketron\Events\MouseEvent.h" />
+    <ClInclude Include="src\Becketron\Layer.h" />
+    <ClInclude Include="src\Becketron\LayerStack.h" />
+    <ClInclude Include="src\Becketron\Log.h" />
+    <ClInclude Include="src\Becketron\Window.h" />
     <ClInclude Include="src\Platform\Windows\WindowsWindow.h" />
-    <ClInclude Include="src\hzpch.h" />
+    <ClInclude Include="src\btpch.h" />
   </ItemGroup>
   <ItemGroup>
-    <ClCompile Include="src\Hazel\Application.cpp" />
-    <ClCompile Include="src\Hazel\Layer.cpp" />
-    <ClCompile Include="src\Hazel\LayerStack.cpp" />
-    <ClCompile Include="src\Hazel\Log.cpp" />
+    <ClCompile Include="src\Becketron\Application.cpp" />
+    <ClCompile Include="src\Becketron\Layer.cpp" />
+    <ClCompile Include="src\Becketron\LayerStack.cpp" />
+    <ClCompile Include="src\Becketron\Log.cpp" />
     <ClCompile Include="src\Platform\Windows\WindowsWindow.cpp" />
-    <ClCompile Include="src\hzpch.cpp">
+    <ClCompile Include="src\btpch.cpp">
       <PrecompiledHeader>Create</PrecompiledHeader>
     </ClCompile>
   </ItemGroup>
diff --git "a/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj.filters" "b/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj.filters"
new file mode 100644
index 0000000..5713e1c
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj.filters"
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Becketron">
+      <UniqueIdentifier>{225EEDF5-8EC8-A16C-D706-531243B07FC1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Becketron\Events">
+      <UniqueIdentifier>{C68FABC1-B288-CA13-DBBA-AF98C712AA1F}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Platform">
+      <UniqueIdentifier>{2AC788B4-1694-E3BF-3FAD-D1672BD9184E}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Platform\Windows">
+      <UniqueIdentifier>{64FBD71A-50F4-F66C-7926-DCF1657ED678}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="src\Becketron.h" />
+    <ClInclude Include="src\Becketron\Application.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Core.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\EntryPoint.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Events\ApplicationEvent.h">
+      <Filter>Becketron\Events</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Events\Event.h">
+      <Filter>Becketron\Events</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Events\KeyEvent.h">
+      <Filter>Becketron\Events</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Events\MouseEvent.h">
+      <Filter>Becketron\Events</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Layer.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\LayerStack.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Log.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Becketron\Window.h">
+      <Filter>Becketron</Filter>
+    </ClInclude>
+    <ClInclude Include="src\Platform\Windows\WindowsWindow.h">
+      <Filter>Platform\Windows</Filter>
+    </ClInclude>
+    <ClInclude Include="src\btpch.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="src\Becketron\Application.cpp">
+      <Filter>Becketron</Filter>
+    </ClCompile>
+    <ClCompile Include="src\Becketron\Layer.cpp">
+      <Filter>Becketron</Filter>
+    </ClCompile>
+    <ClCompile Include="src\Becketron\LayerStack.cpp">
+      <Filter>Becketron</Filter>
+    </ClCompile>
+    <ClCompile Include="src\Becketron\Log.cpp">
+      <Filter>Becketron</Filter>
+    </ClCompile>
+    <ClCompile Include="src\Platform\Windows\WindowsWindow.cpp">
+      <Filter>Platform\Windows</Filter>
+    </ClCompile>
+    <ClCompile Include="src\btpch.cpp" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git "a/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj.user" "b/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj.user"
new file mode 100644
index 0000000..5df420f
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/Becketron.vcxproj.user"
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <ShowAllFiles>false</ShowAllFiles>
+  </PropertyGroup>
+</Project>
\ No newline at end of file
diff --git a/Hazel/Hazel.vcxproj.filters b/Hazel/Hazel.vcxproj.filters
deleted file mode 100644
index 395e242..0000000
--- a/Hazel/Hazel.vcxproj.filters
+++ /dev/null
@@ -1,75 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <ItemGroup>
-    <Filter Include="Hazel">
-      <UniqueIdentifier>{99294D0D-053E-75BE-CEBF-181E3A9371EF}</UniqueIdentifier>
-    </Filter>
-    <Filter Include="Hazel\Events">
-      <UniqueIdentifier>{5DEF92FE-4952-22A3-F2D7-5A59DE19EE25}</UniqueIdentifier>
-    </Filter>
-    <Filter Include="Platform">
-      <UniqueIdentifier>{2AC788B4-1694-E3BF-3FAD-D1672BD9184E}</UniqueIdentifier>
-    </Filter>
-    <Filter Include="Platform\Windows">
-      <UniqueIdentifier>{64FBD71A-50F4-F66C-7926-DCF1657ED678}</UniqueIdentifier>
-    </Filter>
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="src\Hazel.h" />
-    <ClInclude Include="src\Hazel\Application.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Core.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\EntryPoint.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Events\ApplicationEvent.h">
-      <Filter>Hazel\Events</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Events\Event.h">
-      <Filter>Hazel\Events</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Events\KeyEvent.h">
-      <Filter>Hazel\Events</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Events\MouseEvent.h">
-      <Filter>Hazel\Events</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Layer.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\LayerStack.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Log.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Hazel\Window.h">
-      <Filter>Hazel</Filter>
-    </ClInclude>
-    <ClInclude Include="src\Platform\Windows\WindowsWindow.h">
-      <Filter>Platform\Windows</Filter>
-    </ClInclude>
-    <ClInclude Include="src\hzpch.h" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClCompile Include="src\Hazel\Application.cpp">
-      <Filter>Hazel</Filter>
-    </ClCompile>
-    <ClCompile Include="src\Hazel\Layer.cpp">
-      <Filter>Hazel</Filter>
-    </ClCompile>
-    <ClCompile Include="src\Hazel\LayerStack.cpp">
-      <Filter>Hazel</Filter>
-    </ClCompile>
-    <ClCompile Include="src\Hazel\Log.cpp">
-      <Filter>Hazel</Filter>
-    </ClCompile>
-    <ClCompile Include="src\Platform\Windows\WindowsWindow.cpp">
-      <Filter>Platform\Windows</Filter>
-    </ClCompile>
-    <ClCompile Include="src\hzpch.cpp" />
-  </ItemGroup>
-</Project>
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Application.cpp "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Application.cpp"
similarity index 68%
rename from Hazel/src/Hazel/Application.cpp
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Application.cpp"
index 959659b..b78b7fe 100644
--- a/Hazel/src/Hazel/Application.cpp
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Application.cpp"
@@ -1,15 +1,15 @@
-#include "hzpch.h"
+#include "btpch.h"
 #include "Application.h"
 
-#include "Hazel/Log.h"
+#include "Becketron/Log.h"
 
 #include <GLFW/glfw3.h>
 
-namespace Hazel {
+namespace Becketron {
 
 #define BIND_EVENT_FN(x) std::bind(&Application::x, this, std::placeholders::_1)
 
-	Application::Application() 
+	Application::Application()
 	{
 		m_Window = std::unique_ptr<Window>(Window::Create());
 		m_Window->SetEventCallback(BIND_EVENT_FN(OnEvent));
@@ -32,7 +32,9 @@ namespace Hazel {
 	void Application::OnEvent(Event& e)
 	{
 		EventDispatcher dispatcher(e);
-		dispatcher.Dispatch<WindowCloseEvent>(BIND_EVENT_FN(OnWindowClose));
+		//dispatcher.Dispatch<WindowCloseEvent>(BIND_EVENT_FN(OnWindowClose));
+
+		BT_CORE_TRACE("{0}",e);
 
 		for (auto it = m_LayerStack.end(); it != m_LayerStack.begin(); )
 		{
@@ -44,16 +46,18 @@ namespace Hazel {
 
 	void Application::Run()
 	{
-		while (m_Running)
+		while (m_Running);
 		{
-			glClearColor(1, 0, 1, 1);
-			glClear(GL_COLOR_BUFFER_BIT);
-
-			for (Layer* layer : m_LayerStack)
-				layer->OnUpdate();
+			//glClearColor(1, 0, 1, 1);
+			//glClear(GL_COLOR_BUFFER_BIT);
+			//
 
+			//for (Layer* layer : m_LayerStack)
+			//	layer->OnUpdate();
 			m_Window->OnUpdate();
 		}
+
+		glfwTerminate();
 	}
 
 	bool Application::OnWindowClose(WindowCloseEvent& e)
@@ -61,5 +65,4 @@ namespace Hazel {
 		m_Running = false;
 		return true;
 	}
-
-}
\ No newline at end of file
+}
diff --git a/Hazel/src/Hazel/Application.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Application.h"
similarity index 67%
rename from Hazel/src/Hazel/Application.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Application.h"
index 2b56e44..ca1f8aa 100644
--- a/Hazel/src/Hazel/Application.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Application.h"
@@ -3,13 +3,13 @@
 #include "Core.h"
 
 #include "Window.h"
-#include "Hazel/LayerStack.h"
-#include "Hazel/Events/Event.h"
-#include "Hazel/Events/ApplicationEvent.h"
+#include "Becketron/LayerStack.h"
+#include "Becketron/Events/Event.h"
+#include "Becketron/Events/ApplicationEvent.h"
 
-namespace Hazel {
-
-	class HAZEL_API Application
+namespace Becketron
+{
+	class BTRON_API Application
 	{
 	public:
 		Application();
@@ -29,7 +29,7 @@ namespace Hazel {
 		LayerStack m_LayerStack;
 	};
 
-	// To be defined in CLIENT
+	// To be defined in client
 	Application* CreateApplication();
 
 }
\ No newline at end of file
diff --git "a/C:\\Devz\\Becketron\\Becketron/src/Becketron/Core.h" "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Core.h"
new file mode 100644
index 0000000..14b0e56
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Core.h"
@@ -0,0 +1,21 @@
+#pragma once
+
+#ifdef BT_PLATFORM_WINDOWS
+	#ifdef BTRON_BUILD_DLL
+		#define BTRON_API __declspec(dllexport)
+	#else
+		#define BTRON_API __declspec(dllimport)
+	#endif
+#else
+	#error Becketron only supports Windows
+#endif
+
+#ifdef BT_ENABLE_ASSERTS
+	#define BT_ASSERT(x, ...) { if(!(x)) {BT_ERROR("Assertion Failed: {0}", __VA_ARGS__); __debugbreak();}}
+	#define BT_CORE_ASSERT(x, ...) { if(!(x)) {BT_CORE_ERROR("Assertion Failed: {0}", __VA_ARGS__); __debugbreak();}}
+#else
+	#define BT_ASSERT(x, ...)
+	#define BT_CORE_ASSERT(x, ...)
+#endif
+
+#define BIT(x) (1 << x)
\ No newline at end of file
diff --git "a/C:\\Devz\\Becketron\\Becketron/src/Becketron/EntryPoint.h" "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/EntryPoint.h"
new file mode 100644
index 0000000..30740f3
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/EntryPoint.h"
@@ -0,0 +1,23 @@
+#pragma once
+
+#ifdef BT_PLATFORM_WINDOWS
+
+extern Becketron::Application* Becketron::CreateApplication();
+
+int main(int argc, char** argv)
+{ 
+	Becketron::Log::Init();
+	BT_CORE_WARN("Initialized Log!");
+	int a = 0;
+	BT_INFO("Hello VAr={0}", a);
+
+	auto app = Becketron::CreateApplication();
+	app->Run();
+	delete app;
+}
+
+
+#else
+	#err or Becketron only supports Windows
+
+#endif
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Events/ApplicationEvent.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/ApplicationEvent.h"
similarity index 78%
rename from Hazel/src/Hazel/Events/ApplicationEvent.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/ApplicationEvent.h"
index 6a8209e..346a587 100644
--- a/Hazel/src/Hazel/Events/ApplicationEvent.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/ApplicationEvent.h"
@@ -1,10 +1,11 @@
 #pragma once
 
+#include <sstream>
 #include "Event.h"
 
-namespace Hazel {
+namespace Becketron {
 
-	class HAZEL_API WindowResizeEvent : public Event
+	class BTRON_API WindowResizeEvent : public Event
 	{
 	public:
 		WindowResizeEvent(unsigned int width, unsigned int height)
@@ -26,7 +27,7 @@ namespace Hazel {
 		unsigned int m_Width, m_Height;
 	};
 
-	class HAZEL_API WindowCloseEvent : public Event
+	class BTRON_API WindowCloseEvent : public Event
 	{
 	public:
 		WindowCloseEvent() {}
@@ -35,16 +36,15 @@ namespace Hazel {
 		EVENT_CLASS_CATEGORY(EventCategoryApplication)
 	};
 
-	class HAZEL_API AppTickEvent : public Event
+	class BTRON_API AppTickEvent : public Event
 	{
 	public:
 		AppTickEvent() {}
-
 		EVENT_CLASS_TYPE(AppTick)
 		EVENT_CLASS_CATEGORY(EventCategoryApplication)
 	};
 
-	class HAZEL_API AppUpdateEvent : public Event
+	class BTRON_API AppUpdateEvent : public Event
 	{
 	public:
 		AppUpdateEvent() {}
@@ -53,7 +53,7 @@ namespace Hazel {
 		EVENT_CLASS_CATEGORY(EventCategoryApplication)
 	};
 
-	class HAZEL_API AppRenderEvent : public Event
+	class BTRON_API AppRenderEvent : public Event
 	{
 	public:
 		AppRenderEvent() {}
diff --git a/Hazel/src/Hazel/Events/Event.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/Event.h"
similarity index 71%
rename from Hazel/src/Hazel/Events/Event.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/Event.h"
index 74f2c62..41564d6 100644
--- a/Hazel/src/Hazel/Events/Event.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/Event.h"
@@ -1,14 +1,12 @@
 #pragma once
 
-#include "hzpch.h"
-#include "Hazel/Core.h"
+#include "Becketron/Core.h"
+//#include <string>
+#include <functional>
 
-namespace Hazel {
+namespace Becketron {
 
-	// Events in Hazel are currently blocking, meaning when an event occurs it
-	// immediately gets dispatched and must be dealt with right then an there.
-	// For the future, a better strategy might be to buffer events in an event
-	// bus and process them during the "event" part of the update stage.
+	// Events in Becketron are currently blocking
 
 	enum class EventType
 	{
@@ -22,11 +20,11 @@ namespace Hazel {
 	enum EventCategory
 	{
 		None = 0,
-		EventCategoryApplication    = BIT(0),
-		EventCategoryInput          = BIT(1),
-		EventCategoryKeyboard       = BIT(2),
-		EventCategoryMouse          = BIT(3),
-		EventCategoryMouseButton    = BIT(4)
+		EventCategoryApplication = BIT(0),
+		EventCategoryInput		 = BIT(1),
+		EventCategoryKeyboard	 = BIT(2),
+		EventCategoryMouse		 = BIT(3),
+		EventCategoryMouseButton = BIT(4)
 	};
 
 #define EVENT_CLASS_TYPE(type) static EventType GetStaticType() { return EventType::##type; }\
@@ -35,8 +33,10 @@ namespace Hazel {
 
 #define EVENT_CLASS_CATEGORY(category) virtual int GetCategoryFlags() const override { return category; }
 
-	class HAZEL_API Event
+	class BTRON_API Event
 	{
+		friend class EventDispatcher;
+
 	public:
 		bool Handled = false;
 
@@ -49,6 +49,8 @@ namespace Hazel {
 		{
 			return GetCategoryFlags() & category;
 		}
+	public:
+		bool m_Handled = false;
 	};
 
 	class EventDispatcher
@@ -79,5 +81,4 @@ namespace Hazel {
 	{
 		return os << e.ToString();
 	}
-}
-
+}
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Events/KeyEvent.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/KeyEvent.h"
similarity index 67%
rename from Hazel/src/Hazel/Events/KeyEvent.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/KeyEvent.h"
index 4932e47..81c77de 100644
--- a/Hazel/src/Hazel/Events/KeyEvent.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/KeyEvent.h"
@@ -2,22 +2,22 @@
 
 #include "Event.h"
 
-namespace Hazel {
+namespace Becketron {
 
-	class HAZEL_API KeyEvent : public Event
+	class BTRON_API KeyEvent : public Event
 	{
 	public:
 		inline int GetKeyCode() const { return m_KeyCode; }
 
 		EVENT_CLASS_CATEGORY(EventCategoryKeyboard | EventCategoryInput)
 	protected:
-		KeyEvent(int keycode)
-			: m_KeyCode(keycode) {}
+		 KeyEvent(int keycode)
+			 : m_KeyCode(keycode) {}
 
-		int m_KeyCode;
+		 int m_KeyCode;
 	};
 
-	class HAZEL_API KeyPressedEvent : public KeyEvent
+	class BTRON_API KeyPressedEvent : public KeyEvent
 	{
 	public:
 		KeyPressedEvent(int keycode, int repeatCount)
@@ -28,7 +28,7 @@ namespace Hazel {
 		std::string ToString() const override
 		{
 			std::stringstream ss;
-			ss << "KeyPressedEvent: " << m_KeyCode << " (" << m_RepeatCount << " repeats)";
+			ss << "KeyPressedEvent:" << m_KeyCode << " (" << m_RepeatCount << " repeat)";
 			return ss.str();
 		}
 
@@ -37,7 +37,7 @@ namespace Hazel {
 		int m_RepeatCount;
 	};
 
-	class HAZEL_API KeyReleasedEvent : public KeyEvent
+	class BTRON_API KeyReleasedEvent : public KeyEvent
 	{
 	public:
 		KeyReleasedEvent(int keycode)
@@ -50,6 +50,6 @@ namespace Hazel {
 			return ss.str();
 		}
 
-		EVENT_CLASS_TYPE(KeyReleased)
+		EVENT_CLASS_TYPE(KeyReleased);
 	};
 }
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Events/MouseEvent.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/MouseEvent.h"
similarity index 83%
rename from Hazel/src/Hazel/Events/MouseEvent.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/MouseEvent.h"
index 6ee500b..7d08704 100644
--- a/Hazel/src/Hazel/Events/MouseEvent.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Events/MouseEvent.h"
@@ -2,9 +2,9 @@
 
 #include "Event.h"
 
-namespace Hazel {
+namespace Becketron {
 
-	class HAZEL_API MouseMovedEvent : public Event
+	class BTRON_API MouseMovedEvent : public Event
 	{
 	public:
 		MouseMovedEvent(float x, float y)
@@ -26,7 +26,7 @@ namespace Hazel {
 		float m_MouseX, m_MouseY;
 	};
 
-	class HAZEL_API MouseScrolledEvent : public Event
+	class BTRON_API MouseScrolledEvent : public Event
 	{
 	public:
 		MouseScrolledEvent(float xOffset, float yOffset)
@@ -48,7 +48,7 @@ namespace Hazel {
 		float m_XOffset, m_YOffset;
 	};
 
-	class HAZEL_API MouseButtonEvent : public Event
+	class BTRON_API MouseButtonEvent : public Event
 	{
 	public:
 		inline int GetMouseButton() const { return m_Button; }
@@ -61,7 +61,7 @@ namespace Hazel {
 		int m_Button;
 	};
 
-	class HAZEL_API MouseButtonPressedEvent : public MouseButtonEvent
+	class BTRON_API MouseButtonPressedEvent : public MouseButtonEvent
 	{
 	public:
 		MouseButtonPressedEvent(int button)
@@ -77,7 +77,7 @@ namespace Hazel {
 		EVENT_CLASS_TYPE(MouseButtonPressed)
 	};
 
-	class HAZEL_API MouseButtonReleasedEvent : public MouseButtonEvent
+	class BTRON_API MouseButtonReleasedEvent : public MouseButtonEvent
 	{
 	public:
 		MouseButtonReleasedEvent(int button)
@@ -90,7 +90,6 @@ namespace Hazel {
 			return ss.str();
 		}
 
-		EVENT_CLASS_TYPE(MouseButtonReleased)
+		EVENT_CLASS_TYPE(MouseButtonReleased);
 	};
-
 }
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Layer.cpp "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Layer.cpp"
similarity index 74%
rename from Hazel/src/Hazel/Layer.cpp
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Layer.cpp"
index d21e5a3..9bd0eb5 100644
--- a/Hazel/src/Hazel/Layer.cpp
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Layer.cpp"
@@ -1,7 +1,7 @@
-#include "hzpch.h"
+#include "btpch.h"
 #include "Layer.h"
 
-namespace Hazel {
+namespace Becketron {
 
 	Layer::Layer(const std::string& debugName)
 		: m_DebugName(debugName)
@@ -10,7 +10,5 @@ namespace Hazel {
 
 	Layer::~Layer()
 	{
-
 	}
-
 }
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Layer.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Layer.h"
similarity index 74%
rename from Hazel/src/Hazel/Layer.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Layer.h"
index f09b51d..fd3cecf 100644
--- a/Hazel/src/Hazel/Layer.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Layer.h"
@@ -1,11 +1,11 @@
 #pragma once
 
-#include "Hazel/Core.h"
-#include "Hazel/Events/Event.h"
+#include "Becketron/Core.h"
+#include "Becketron/Events/Event.h"
 
-namespace Hazel {
+namespace Becketron {
 
-	class HAZEL_API Layer
+	class BTRON_API Layer
 	{
 	public:
 		Layer(const std::string& name = "Layer");
@@ -20,5 +20,4 @@ namespace Hazel {
 	protected:
 		std::string m_DebugName;
 	};
-
-}
\ No newline at end of file
+}
diff --git a/Hazel/src/Hazel/LayerStack.cpp "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/LayerStack.cpp"
similarity index 94%
rename from Hazel/src/Hazel/LayerStack.cpp
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/LayerStack.cpp"
index d69ce0a..a48aa4f 100644
--- a/Hazel/src/Hazel/LayerStack.cpp
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/LayerStack.cpp"
@@ -1,7 +1,7 @@
-#include "hzpch.h"
+#include "btpch.h"
 #include "LayerStack.h"
 
-namespace Hazel {
+namespace Becketron {
 
 	LayerStack::LayerStack()
 	{
diff --git a/Hazel/src/Hazel/LayerStack.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/LayerStack.h"
similarity index 85%
rename from Hazel/src/Hazel/LayerStack.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/LayerStack.h"
index 220babb..a38765c 100644
--- a/Hazel/src/Hazel/LayerStack.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/LayerStack.h"
@@ -1,13 +1,13 @@
 #pragma once
 
-#include "Hazel/Core.h"
+#include "Becketron/Core.h"
 #include "Layer.h"
 
 #include <vector>
 
-namespace Hazel {
+namespace Becketron {
 
-	class HAZEL_API LayerStack
+	class BTRON_API LayerStack
 	{
 	public:
 		LayerStack();
@@ -24,5 +24,4 @@ namespace Hazel {
 		std::vector<Layer*> m_Layers;
 		std::vector<Layer*>::iterator m_LayerInsert;
 	};
-
 }
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Log.cpp "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Log.cpp"
similarity index 80%
rename from Hazel/src/Hazel/Log.cpp
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Log.cpp"
index b9bba89..8746bed 100644
--- a/Hazel/src/Hazel/Log.cpp
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Log.cpp"
@@ -1,9 +1,9 @@
-#include "hzpch.h"
-#include "Log.h"
+#include "btpch.h"
 
+#include "Log.h"
 #include "spdlog/sinks/stdout_color_sinks.h"
 
-namespace Hazel {
+namespace Becketron {
 
 	std::shared_ptr<spdlog::logger> Log::s_CoreLogger;
 	std::shared_ptr<spdlog::logger> Log::s_ClientLogger;
@@ -11,11 +11,9 @@ namespace Hazel {
 	void Log::Init()
 	{
 		spdlog::set_pattern("%^[%T] %n: %v%$");
-		s_CoreLogger = spdlog::stdout_color_mt("HAZEL");
+		s_CoreLogger = spdlog::stdout_color_mt("BECKETRON");
 		s_CoreLogger->set_level(spdlog::level::trace);
-
 		s_ClientLogger = spdlog::stdout_color_mt("APP");
 		s_ClientLogger->set_level(spdlog::level::trace);
 	}
-
 }
\ No newline at end of file
diff --git "a/C:\\Devz\\Becketron\\Becketron/src/Becketron/Log.h" "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Log.h"
new file mode 100644
index 0000000..6a5e75c
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Log.h"
@@ -0,0 +1,36 @@
+#pragma once
+
+#include "Core.h"
+#include "spdlog/spdlog.h"
+#include "spdlog/fmt/ostr.h"
+
+
+namespace Becketron {
+
+	class BTRON_API Log
+	{
+	public:
+		static void Init();
+
+		inline static std::shared_ptr<spdlog::logger>& GetCoreLogger() { return s_CoreLogger; }
+		inline static std::shared_ptr<spdlog::logger>& GetClientLogger() { return s_ClientLogger; }
+
+	private:
+		static std::shared_ptr<spdlog::logger> s_CoreLogger;
+		static std::shared_ptr<spdlog::logger> s_ClientLogger;
+	};
+
+}
+// Core Log macros
+#define BT_CORE_TRACE(...)	::Becketron::Log::GetCoreLogger()->trace(__VA_ARGS__);
+#define BT_CORE_INFO(...)	::Becketron::Log::GetCoreLogger()->info(__VA_ARGS__);
+#define BT_CORE_WARN(...)	::Becketron::Log::GetCoreLogger()->warn(__VA_ARGS__);
+#define BT_CORE_ERROR(...)	::Becketron::Log::GetCoreLogger()->error(__VA_ARGS__);
+#define BT_CORE_FATAL(...)	::Becketron::Log::GetCoreLogger()->fatal(__VA_ARGS__);
+
+// Client Log macros
+#define BT_TRACE(...)	::Becketron::Log::GetClientLogger()->trace(__VA_ARGS__);
+#define BT_INFO(...)	::Becketron::Log::GetClientLogger()->info(__VA_ARGS__);
+#define BT_WARN(...)	::Becketron::Log::GetClientLogger()->warn(__VA_ARGS__);
+#define BT_ERROR(...)	::Becketron::Log::GetClientLogger()->error(__VA_ARGS__);
+#define BT_FATAL(...)	::Becketron::Log::GetClientLogger()->fatal(__VA_ARGS__);
diff --git a/Hazel/src/Hazel/Window.h "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Window.h"
similarity index 64%
rename from Hazel/src/Hazel/Window.h
rename to "C:\\Devz\\Becketron\\Becketron/src/Becketron/Window.h"
index b9d82db..253425a 100644
--- a/Hazel/src/Hazel/Window.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron/Window.h"
@@ -1,11 +1,11 @@
 #pragma once
 
-#include "hzpch.h"
+#include "btpch.h"
 
-#include "Hazel/Core.h"
-#include "Hazel/Events/Event.h"
+#include "Becketron/Core.h"
+#include "Becketron/Events/Event.h"
 
-namespace Hazel {
+namespace Becketron {
 
 	struct WindowProps
 	{
@@ -13,21 +13,20 @@ namespace Hazel {
 		unsigned int Width;
 		unsigned int Height;
 
-		WindowProps(const std::string& title = "Hazel Engine",
-			        unsigned int width = 1280,
-			        unsigned int height = 720)
+		WindowProps(const std::string& title = "Becketron Engine",
+			unsigned int width = 1280,
+			unsigned int height = 720)
 			: Title(title), Width(width), Height(height)
 		{
 		}
 	};
 
-	// Interface representing a desktop system based Window
-	class HAZEL_API Window
+	class BTRON_API Window
 	{
 	public:
 		using EventCallbackFn = std::function<void(Event&)>;
 
-		virtual ~Window() {}
+		virtual ~Window() {};
 
 		virtual void OnUpdate() = 0;
 
@@ -39,7 +38,8 @@ namespace Hazel {
 		virtual void SetVSync(bool enabled) = 0;
 		virtual bool IsVSync() const = 0;
 
+
+
 		static Window* Create(const WindowProps& props = WindowProps());
 	};
-
 }
\ No newline at end of file
diff --git "a/C:\\Devz\\Becketron\\Becketron/src/Becketron.h" "b/C:\\Devz\\Becketron\\Becketron/src/Becketron.h"
new file mode 100644
index 0000000..36d2606
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Becketron.h"
@@ -0,0 +1,10 @@
+#pragma once
+
+
+// To be used by the Becketron applications
+#include "Becketron/Application.h"
+#include "Becketron/Log.h"
+
+// --Entry Point----
+#include "Becketron/EntryPoint.h"
+//-------------------------------------------------
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Core.h b/Hazel/src/Hazel/Core.h
deleted file mode 100644
index e784b32..0000000
--- a/Hazel/src/Hazel/Core.h
+++ /dev/null
@@ -1,21 +0,0 @@
-#pragma once
-
-#ifdef HZ_PLATFORM_WINDOWS
-	#ifdef HZ_BUILD_DLL
-		#define HAZEL_API __declspec(dllexport)
-	#else
-		#define HAZEL_API __declspec(dllimport)
-	#endif
-#else
-	#error Hazel only supports Windows!
-#endif
-
-#ifdef HZ_ENABLE_ASSERTS
-	#define HZ_ASSERT(x, ...) { if(!(x)) { HZ_ERROR("Assertion Failed: {0}", __VA_ARGS__); __debugbreak(); } }
-	#define HZ_CORE_ASSERT(x, ...) { if(!(x)) { HZ_CORE_ERROR("Assertion Failed: {0}", __VA_ARGS__); __debugbreak(); } }
-#else
-	#define HZ_ASSERT(x, ...)
-	#define HZ_CORE_ASSERT(x, ...)
-#endif
-
-#define BIT(x) (1 << x)
\ No newline at end of file
diff --git a/Hazel/src/Hazel/EntryPoint.h b/Hazel/src/Hazel/EntryPoint.h
deleted file mode 100644
index a257abd..0000000
--- a/Hazel/src/Hazel/EntryPoint.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#pragma once
-
-#ifdef HZ_PLATFORM_WINDOWS
-
-extern Hazel::Application* Hazel::CreateApplication();
-
-int main(int argc, char** argv)
-{
-	Hazel::Log::Init();
-	HZ_CORE_WARN("Initialized Log!");
-	int a = 5;
-	HZ_INFO("Hello! Var={0}", a);
-
-	auto app = Hazel::CreateApplication();
-	app->Run();
-	delete app;
-}
-
-#endif
\ No newline at end of file
diff --git a/Hazel/src/Hazel/Log.h b/Hazel/src/Hazel/Log.h
deleted file mode 100644
index de9bab7..0000000
--- a/Hazel/src/Hazel/Log.h
+++ /dev/null
@@ -1,35 +0,0 @@
-#pragma once
-
-#include "Core.h"
-#include "spdlog/spdlog.h"
-#include "spdlog/fmt/ostr.h"
-
-namespace Hazel {
-
-	class HAZEL_API Log
-	{
-	public:
-		static void Init();
-
-		inline static std::shared_ptr<spdlog::logger>& GetCoreLogger() { return s_CoreLogger; }
-		inline static std::shared_ptr<spdlog::logger>& GetClientLogger() { return s_ClientLogger; }
-	private:
-		static std::shared_ptr<spdlog::logger> s_CoreLogger;
-		static std::shared_ptr<spdlog::logger> s_ClientLogger;
-	};
-
-}
-
-// Core log macros
-#define HZ_CORE_TRACE(...)    ::Hazel::Log::GetCoreLogger()->trace(__VA_ARGS__)
-#define HZ_CORE_INFO(...)     ::Hazel::Log::GetCoreLogger()->info(__VA_ARGS__)
-#define HZ_CORE_WARN(...)     ::Hazel::Log::GetCoreLogger()->warn(__VA_ARGS__)
-#define HZ_CORE_ERROR(...)    ::Hazel::Log::GetCoreLogger()->error(__VA_ARGS__)
-#define HZ_CORE_FATAL(...)    ::Hazel::Log::GetCoreLogger()->fatal(__VA_ARGS__)
-
-// Client log macros
-#define HZ_TRACE(...)	      ::Hazel::Log::GetClientLogger()->trace(__VA_ARGS__)
-#define HZ_INFO(...)	      ::Hazel::Log::GetClientLogger()->info(__VA_ARGS__)
-#define HZ_WARN(...)	      ::Hazel::Log::GetClientLogger()->warn(__VA_ARGS__)
-#define HZ_ERROR(...)	      ::Hazel::Log::GetClientLogger()->error(__VA_ARGS__)
-#define HZ_FATAL(...)	      ::Hazel::Log::GetClientLogger()->fatal(__VA_ARGS__)
\ No newline at end of file
diff --git a/Hazel/src/Hazel.h b/Hazel/src/Hazel.h
deleted file mode 100644
index e5ed351..0000000
--- a/Hazel/src/Hazel.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#pragma once
-
-// For use by Hazel applications
-
-#include "Hazel/Application.h"
-#include "Hazel/Layer.h"
-#include "Hazel/Log.h"
-
-// ---Entry Point---------------------
-#include "Hazel/EntryPoint.h"
-// -----------------------------------
\ No newline at end of file
diff --git a/Hazel/src/Platform/Windows/WindowsWindow.cpp "b/C:\\Devz\\Becketron\\Becketron/src/Platform/Windows/WindowsWindow.cpp"
index 42dbacd..8430e36 100644
--- a/Hazel/src/Platform/Windows/WindowsWindow.cpp
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Platform/Windows/WindowsWindow.cpp"
@@ -1,19 +1,19 @@
-#include "hzpch.h"
+#include "btpch.h"
 #include "WindowsWindow.h"
 
-#include "Hazel/Events/ApplicationEvent.h"
-#include "Hazel/Events/MouseEvent.h"
-#include "Hazel/Events/KeyEvent.h"
+#include "Becketron/Events/KeyEvent.h"
+#include "Becketron/Events/MouseEvent.h"
+#include "Becketron/Events/ApplicationEvent.h"
 
-namespace Hazel {
-	
-	static bool s_GLFWInitialized = false;
+namespace Becketron {
 
 	static void GLFWErrorCallback(int error, const char* description)
 	{
-		HZ_CORE_ERROR("GLFW Error ({0}): {1}", error, description);
+		BT_CORE_ERROR("GLFW Error ({0}): {1}", error, description);
 	}
 
+	static bool s_GLFWInitialized = false;
+
 	Window* Window::Create(const WindowProps& props)
 	{
 		return new WindowsWindow(props);
@@ -35,42 +35,50 @@ namespace Hazel {
 		m_Data.Width = props.Width;
 		m_Data.Height = props.Height;
 
-		HZ_CORE_INFO("Creating window {0} ({1}, {2})", props.Title, props.Width, props.Height);
+		BT_CORE_INFO("Creating window {0} ({1}, {2})", props.Title, props.Width, props.Height);
 
 		if (!s_GLFWInitialized)
 		{
 			// TODO: glfwTerminate on system shutdown
 			int success = glfwInit();
-			HZ_CORE_ASSERT(success, "Could not intialize GLFW!");
+			BT_CORE_ASSERT(success, "Could not initialize GLFW!");
 			glfwSetErrorCallback(GLFWErrorCallback);
+
+			glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
+			glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
+			glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
+
 			s_GLFWInitialized = true;
 		}
 
 		m_Window = glfwCreateWindow((int)props.Width, (int)props.Height, m_Data.Title.c_str(), nullptr, nullptr);
+
+		if (!m_Window)
+		{
+			glfwTerminate();
+		}
+
 		glfwMakeContextCurrent(m_Window);
 		glfwSetWindowUserPointer(m_Window, &m_Data);
 		SetVSync(true);
 
-		// Set GLFW callbacks
-		glfwSetWindowSizeCallback(m_Window, [](GLFWwindow* window, int width, int height)
-		{
+		//Set GLFW callbacks
+		glfwSetWindowSizeCallback(m_Window, [](GLFWwindow* window, int width, int height) {
 			WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window);
 			data.Width = width;
 			data.Height = height;
 
 			WindowResizeEvent event(width, height);
-			data.EventCallback(event);
+			data.EventCallback(event);	
 		});
 
-		glfwSetWindowCloseCallback(m_Window, [](GLFWwindow* window)
-		{
+		glfwSetWindowCloseCallback(m_Window, [](GLFWwindow* window) {
 			WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window);
 			WindowCloseEvent event;
 			data.EventCallback(event);
 		});
 
-		glfwSetKeyCallback(m_Window, [](GLFWwindow* window, int key, int scancode, int action, int mods)
-		{
+		glfwSetKeyCallback(m_Window, [](GLFWwindow* window, int key, int scancode, int action, int mods) {
 			WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window);
 
 			switch (action)
@@ -125,8 +133,8 @@ namespace Hazel {
 			data.EventCallback(event);
 		});
 
-		glfwSetCursorPosCallback(m_Window, [](GLFWwindow* window, double xPos, double yPos)
-		{
+		glfwSetCursorPosCallback(m_Window, [](GLFWwindow* window, double xPos, double yPos) {
+
 			WindowData& data = *(WindowData*)glfwGetWindowUserPointer(window);
 
 			MouseMovedEvent event((float)xPos, (float)yPos);
@@ -141,8 +149,17 @@ namespace Hazel {
 
 	void WindowsWindow::OnUpdate()
 	{
-		glfwPollEvents();
-		glfwSwapBuffers(m_Window);
+		//while (!glfwWindowShouldClose(m_Window))
+		//while(true)
+		{
+		//added as an alternative
+			glClearColor(1, 0, 1, 1);
+			glClear(GL_COLOR_BUFFER_BIT);
+		// -----
+			glfwSwapBuffers(m_Window);
+			glfwPollEvents();
+		//glfwWaitEvents();
+		}
 	}
 
 	void WindowsWindow::SetVSync(bool enabled)
@@ -159,5 +176,4 @@ namespace Hazel {
 	{
 		return m_Data.VSync;
 	}
-
-}
+}
\ No newline at end of file
diff --git a/Hazel/src/Platform/Windows/WindowsWindow.h "b/C:\\Devz\\Becketron\\Becketron/src/Platform/Windows/WindowsWindow.h"
index 9bcf3c0..a3ede48 100644
--- a/Hazel/src/Platform/Windows/WindowsWindow.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/Platform/Windows/WindowsWindow.h"
@@ -1,10 +1,11 @@
 #pragma once
 
-#include "Hazel/Window.h"
+#include "Becketron/Window.h"
+#include "Becketron/Log.h"
 
 #include <GLFW/glfw3.h>
 
-namespace Hazel {
+namespace Becketron {
 
 	class WindowsWindow : public Window
 	{
@@ -14,13 +15,17 @@ namespace Hazel {
 
 		void OnUpdate() override;
 
+		int a=0;
+
 		inline unsigned int GetWidth() const override { return m_Data.Width; }
 		inline unsigned int GetHeight() const override { return m_Data.Height; }
 
-		// Window attributes
+		//Window attributes
 		inline void SetEventCallback(const EventCallbackFn& callback) override { m_Data.EventCallback = callback; }
 		void SetVSync(bool enabled) override;
 		bool IsVSync() const override;
+		//GLFWwindow* m_Window;
+
 	private:
 		virtual void Init(const WindowProps& props);
 		virtual void Shutdown();
@@ -38,5 +43,4 @@ namespace Hazel {
 
 		WindowData m_Data;
 	};
-
-}
\ No newline at end of file
+}
diff --git "a/C:\\Devz\\Becketron\\Becketron/src/btpch.cpp" "b/C:\\Devz\\Becketron\\Becketron/src/btpch.cpp"
new file mode 100644
index 0000000..5303ce2
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/src/btpch.cpp"
@@ -0,0 +1 @@
+#include "btpch.h"
\ No newline at end of file
diff --git a/Hazel/src/hzpch.h "b/C:\\Devz\\Becketron\\Becketron/src/btpch.h"
similarity index 80%
rename from Hazel/src/hzpch.h
rename to "C:\\Devz\\Becketron\\Becketron/src/btpch.h"
index b9724f6..97c3d89 100644
--- a/Hazel/src/hzpch.h
+++ "b/C:\\Devz\\Becketron\\Becketron/src/btpch.h"
@@ -1,19 +1,19 @@
 #pragma once
 
+#include <functional>
+#include <string>
 #include <iostream>
 #include <memory>
 #include <utility>
 #include <algorithm>
-#include <functional>
-
-#include <string>
 #include <sstream>
 #include <vector>
 #include <unordered_map>
 #include <unordered_set>
 
-#include "Hazel/Log.h"
+#include "Becketron/Log.h"
 
-#ifdef HZ_PLATFORM_WINDOWS
+#ifdef BT_PLATFORM_WINDOWS
 	#include <Windows.h>
-#endif
\ No newline at end of file
+#endif
+
diff --git a/Hazel/src/hzpch.cpp b/Hazel/src/hzpch.cpp
deleted file mode 100644
index 2b30e13..0000000
--- a/Hazel/src/hzpch.cpp
+++ /dev/null
@@ -1 +0,0 @@
-#include "hzpch.h"
\ No newline at end of file
diff --git a/Hazel/vendor/GLFW/.git "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/.git"
index 00c0c7c..dd8652a 100644
--- a/Hazel/vendor/GLFW/.git
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/.git"
@@ -1 +1 @@
-gitdir: ../../../.git/modules/Hazel/vendor/GLFW
+gitdir: ../../../.git/modules/Becketron/vendor/GLFW
diff --git a/Hazel/vendor/GLFW/GLFW.vcxproj "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj"
index eac8e1d..201b16f 100644
--- a/Hazel/vendor/GLFW/GLFW.vcxproj
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj"
@@ -19,7 +19,6 @@
     <IgnoreWarnCompileDuplicatedFilename>true</IgnoreWarnCompileDuplicatedFilename>
     <Keyword>Win32Proj</Keyword>
     <RootNamespace>GLFW</RootNamespace>
-    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
@@ -75,9 +74,7 @@
     <ClCompile>
       <PrecompiledHeader>NotUsing</PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
-      <PreprocessorDefinitions>_GLFW_WIN32;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <Optimization>Disabled</Optimization>
-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
     </ClCompile>
     <Link>
       <SubSystem>Windows</SubSystem>
@@ -87,9 +84,7 @@
     <ClCompile>
       <PrecompiledHeader>NotUsing</PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
-      <PreprocessorDefinitions>_GLFW_WIN32;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <Optimization>Disabled</Optimization>
-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
       <AdditionalOptions>/MT %(AdditionalOptions)</AdditionalOptions>
     </ClCompile>
     <Link>
@@ -100,9 +95,7 @@
     <ClCompile>
       <PrecompiledHeader>NotUsing</PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
-      <PreprocessorDefinitions>_GLFW_WIN32;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <Optimization>Disabled</Optimization>
-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
     </ClCompile>
     <Link>
       <SubSystem>Windows</SubSystem>
@@ -115,21 +108,15 @@
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="src\context.c" />
-    <ClCompile Include="src\egl_context.c" />
     <ClCompile Include="src\init.c" />
     <ClCompile Include="src\input.c" />
     <ClCompile Include="src\monitor.c" />
-    <ClCompile Include="src\osmesa_context.c" />
     <ClCompile Include="src\vulkan.c" />
-    <ClCompile Include="src\wgl_context.c" />
-    <ClCompile Include="src\win32_init.c" />
-    <ClCompile Include="src\win32_joystick.c" />
-    <ClCompile Include="src\win32_monitor.c" />
-    <ClCompile Include="src\win32_thread.c" />
-    <ClCompile Include="src\win32_time.c" />
-    <ClCompile Include="src\win32_window.c" />
     <ClCompile Include="src\window.c" />
   </ItemGroup>
+  <ItemGroup>
+    <None Include="premake5.lua" />
+  </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
diff --git a/Hazel/vendor/GLFW/GLFW.vcxproj.filters "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj.filters"
index 1527a16..a6f2abb 100644
--- a/Hazel/vendor/GLFW/GLFW.vcxproj.filters
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj.filters"
@@ -26,9 +26,6 @@
     <ClCompile Include="src\context.c">
       <Filter>src</Filter>
     </ClCompile>
-    <ClCompile Include="src\egl_context.c">
-      <Filter>src</Filter>
-    </ClCompile>
     <ClCompile Include="src\init.c">
       <Filter>src</Filter>
     </ClCompile>
@@ -38,35 +35,14 @@
     <ClCompile Include="src\monitor.c">
       <Filter>src</Filter>
     </ClCompile>
-    <ClCompile Include="src\osmesa_context.c">
-      <Filter>src</Filter>
-    </ClCompile>
     <ClCompile Include="src\vulkan.c">
       <Filter>src</Filter>
     </ClCompile>
-    <ClCompile Include="src\wgl_context.c">
-      <Filter>src</Filter>
-    </ClCompile>
-    <ClCompile Include="src\win32_init.c">
-      <Filter>src</Filter>
-    </ClCompile>
-    <ClCompile Include="src\win32_joystick.c">
-      <Filter>src</Filter>
-    </ClCompile>
-    <ClCompile Include="src\win32_monitor.c">
-      <Filter>src</Filter>
-    </ClCompile>
-    <ClCompile Include="src\win32_thread.c">
-      <Filter>src</Filter>
-    </ClCompile>
-    <ClCompile Include="src\win32_time.c">
-      <Filter>src</Filter>
-    </ClCompile>
-    <ClCompile Include="src\win32_window.c">
-      <Filter>src</Filter>
-    </ClCompile>
     <ClCompile Include="src\window.c">
       <Filter>src</Filter>
     </ClCompile>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="premake5.lua" />
+  </ItemGroup>
 </Project>
\ No newline at end of file
diff --git "a/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj.user" "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj.user"
new file mode 100644
index 0000000..966b4ff
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/GLFW.vcxproj.user"
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <ShowAllFiles>true</ShowAllFiles>
+  </PropertyGroup>
+</Project>
\ No newline at end of file
diff --git a/Hazel/vendor/GLFW/bin/Debug-windows-x86_64/GLFW/GLFW.lib b/Hazel/vendor/GLFW/bin/Debug-windows-x86_64/GLFW/GLFW.lib
deleted file mode 100644
index 0d24edc..0000000
Binary files a/Hazel/vendor/GLFW/bin/Debug-windows-x86_64/GLFW/GLFW.lib and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin/Debug-windows-x86_64/GLFW/GLFW.pdb b/Hazel/vendor/GLFW/bin/Debug-windows-x86_64/GLFW/GLFW.pdb
deleted file mode 100644
index 106519e..0000000
Binary files a/Hazel/vendor/GLFW/bin/Debug-windows-x86_64/GLFW/GLFW.pdb and /dev/null differ
diff --git "a/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.Build.CppClean.log" "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.Build.CppClean.log"
new file mode 100644
index 0000000..e160865
--- /dev/null
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.Build.CppClean.log"
@@ -0,0 +1,23 @@
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.pdb
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\window.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\win32_window.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\win32_time.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\win32_thread.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\win32_monitor.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\win32_joystick.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\win32_init.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\wgl_context.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\vulkan.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\osmesa_context.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\monitor.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\input.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\init.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\egl_context.obj
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\context.obj
+c:\devz\becketron\becketron\vendor\glfw\bin\debug-windows-x86_64\glfw\glfw.lib
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.tlog\cl.command.1.tlog
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.tlog\cl.read.1.tlog
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.tlog\cl.write.1.tlog
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.tlog\lib-link.read.1.tlog
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.tlog\lib-link.write.1.tlog
+c:\devz\becketron\becketron\vendor\glfw\bin-int\debug-windows-x86_64\glfw\glfw.tlog\lib.command.1.tlog
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.log "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.log"
index 4af0470..b8eae78 100644
--- a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.log
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.log"
@@ -1,17 +1,13 @@
 ﻿  context.c
-  egl_context.c
+C:\Devz\Becketron\Becketron\vendor\GLFW\src\internal.h(194,1): fatal error C1189: #error:  "No supported window creation API selected"
   init.c
+C:\Devz\Becketron\Becketron\vendor\GLFW\src\internal.h(194,1): fatal error C1189: #error:  "No supported window creation API selected"
   input.c
+C:\Devz\Becketron\Becketron\vendor\GLFW\src\internal.h(194,1): fatal error C1189: #error:  "No supported window creation API selected"
   monitor.c
-  osmesa_context.c
+C:\Devz\Becketron\Becketron\vendor\GLFW\src\internal.h(194,1): fatal error C1189: #error:  "No supported window creation API selected"
   vulkan.c
-  wgl_context.c
-  win32_init.c
-  win32_joystick.c
-  win32_monitor.c
-  win32_thread.c
-  win32_time.c
-  win32_window.c
+C:\Devz\Becketron\Becketron\vendor\GLFW\src\internal.h(194,1): fatal error C1189: #error:  "No supported window creation API selected"
   window.c
+C:\Devz\Becketron\Becketron\vendor\GLFW\src\internal.h(194,1): fatal error C1189: #error:  "No supported window creation API selected"
   Generating Code...
-  GLFW.vcxproj -> C:\Users\sonof\Downloads\HZ_2018\Hazel-2018\Hazel\Hazel\vendor\GLFW\bin\Debug-windows-x86_64\GLFW\GLFW.lib
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.pdb "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.pdb"
index 106519e..29c15df 100644
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.pdb and "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.pdb" differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.command.1.tlog "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.command.1.tlog"
index cf367d4..46b134b 100644
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.command.1.tlog and "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.command.1.tlog" differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.read.1.tlog b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.read.1.tlog
deleted file mode 100644
index 0123ad6..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.read.1.tlog and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.write.1.tlog b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.write.1.tlog
deleted file mode 100644
index 1eadc89..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/CL.write.1.tlog and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/GLFW.lastbuildstate "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/GLFW.lastbuildstate"
index 9f745d6..e8e1ac3 100644
--- a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/GLFW.lastbuildstate
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/GLFW.lastbuildstate"
@@ -1,2 +1,2 @@
 PlatformToolSet=v142:VCToolArchitecture=Native32Bit:VCToolsVersion=14.28.29333:TargetPlatformVersion=10.0.19041.0:
-Debug|x64|C:\Users\sonof\Downloads\HZ_2018\Hazel-2018\Hazel\|
+Debug|x64|C:\Devz\Becketron\|
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib-link.read.1.tlog b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib-link.read.1.tlog
deleted file mode 100644
index c3cff7e..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib-link.read.1.tlog and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib-link.write.1.tlog b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib-link.write.1.tlog
deleted file mode 100644
index 99e8c63..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib-link.write.1.tlog and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib.command.1.tlog b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib.command.1.tlog
deleted file mode 100644
index 6bdaf28..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/Lib.command.1.tlog and /dev/null differ
diff --git "a/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/unsuccessfulbuild" "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.tlog/unsuccessfulbuild"
new file mode 100644
index 0000000..e69de29
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.vcxproj.FileListAbsolute.txt "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.vcxproj.FileListAbsolute.txt"
index f8c673b..e69de29 100644
--- a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.vcxproj.FileListAbsolute.txt
+++ "b/C:\\Devz\\Becketron\\Becketron/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/GLFW.vcxproj.FileListAbsolute.txt"
@@ -1,2 +0,0 @@
-C:\Users\sonof\Downloads\HZ_2018\Hazel-2018\Hazel\Hazel\vendor\GLFW\bin\Debug-windows-x86_64\GLFW\GLFW.pdb
-C:\Users\sonof\Downloads\HZ_2018\Hazel-2018\Hazel\Hazel\vendor\GLFW\bin-int\Debug-windows-x86_64\GLFW\GLFW.pdb
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/context.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/context.obj
deleted file mode 100644
index 4fc98f6..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/context.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/egl_context.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/egl_context.obj
deleted file mode 100644
index 65c2e01..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/egl_context.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/init.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/init.obj
deleted file mode 100644
index 3a5223d..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/init.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/input.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/input.obj
deleted file mode 100644
index 6af942c..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/input.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/monitor.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/monitor.obj
deleted file mode 100644
index 344953b..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/monitor.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/osmesa_context.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/osmesa_context.obj
deleted file mode 100644
index 1d1c727..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/osmesa_context.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/vulkan.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/vulkan.obj
deleted file mode 100644
index 0367b8d..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/vulkan.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/wgl_context.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/wgl_context.obj
deleted file mode 100644
index c5b6b37..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/wgl_context.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_init.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_init.obj
deleted file mode 100644
index 37efc59..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_init.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_joystick.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_joystick.obj
deleted file mode 100644
index 7ab5891..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_joystick.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_monitor.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_monitor.obj
deleted file mode 100644
index 9bad344..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_monitor.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_thread.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_thread.obj
deleted file mode 100644
index a80b42e..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_thread.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_time.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_time.obj
deleted file mode 100644
index fb68b2d..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_time.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_window.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_window.obj
deleted file mode 100644
index 72b7b74..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/win32_window.obj and /dev/null differ
diff --git a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/window.obj b/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/window.obj
deleted file mode 100644
index 55bc0f0..0000000
Binary files a/Hazel/vendor/GLFW/bin-int/Debug-windows-x86_64/GLFW/window.obj and /dev/null differ
